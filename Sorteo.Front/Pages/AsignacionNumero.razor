@page "/AsignacionNumero"
@using Microsoft.AspNetCore.Mvc;
@using Sorteo.Front.Data

<PageTitle>Asignacion Numero Sorteo</PageTitle>

<h1>Asignacion Numero Sorteo</h1>

<div class="row">
    <div class="col-md-4">
        <div class="form-group">
            <label for="clienteSelect">Seleccionar Cliente:</label>
            <select id="clienteSelect" class="form-control" @onchange="OnClienteSelected">
                <option value="">Seleccione un cliente</option>
                @if (clientes != null)
                {
                    @foreach (var cliente in clientes)
                    {
                        <option value="@cliente.IdCLiente">@cliente.NombreCliente</option>
                    }
                }
            </select>
        </div>
    </div>

    <div class="col-md-4">
        <div class="form-group">
            <label for="usuarioSelect">Seleccionar Usuario:</label>
            <select id="usuarioSelect" class="form-control" @bind="selectedUsuarioId">
                <option value="">Seleccione un usuario</option>
                @if (usuarios != null)
                {
                    @foreach (var usuario in usuarios)
                    {
                        <option value="@usuario.IdUsuario">@usuario.DescripcionUsuario</option>
                    }
                }
            </select>
        </div>
    </div>

    <div class="col-md-4">
        <div class="form-group">
            <label for="productoSelect">Seleccionar Sorteo:</label>
            <select id="productoSelect" class="form-control" @bind="selectedProductoId">
                <option value="">Seleccione un producto</option>
                @if (productos != null)
                {
                    @foreach (var producto in productos)
                    {
                        <option value="@producto.Id">@producto.Nombre</option>
                    }
                }
            </select>
        </div>
    </div>
</div>

<div class="row mt-3">
    <div class="col-md-12 d-flex justify-content-center">
        <button class="btn btn-primary" @onclick="SolicitarNumero">Solicitar Numero Sorteo</button>
    </div>
</div>

<div class="row mt-3">
    @if (asignacion != null)
    {
        <div class="col-md-12">
            <table class="table">
                <tr>
                    <td>Numero Sorteo:</td>
                    <td>@asignacion.Numero</td>
                </tr>
                <tr>
                    <td>Cliente:</td>
                    <td>@cliente.NombreCliente</td>
                </tr>
                <tr>
                    <td>Usuario:</td>
                    <td>@usuario.DescripcionUsuario</td>
                </tr>
                <tr>
                    <td>Producto Sorteo:</td>
                    <td>@product.Nombre</td>
                </tr>
            </table>
        </div>
    }
</div>

@code {
    private List<ClienteModel> clientes;
    private List<UsuarioModel> usuarios;
    private List<ProductModel> productos;
    private int selectedClienteId;
    private int selectedUsuarioId;
    private int selectedProductoId;
    private AsignacionDto asignacion;
    private ClienteModel cliente;
    private UsuarioModel usuario;
    private ProductModel product;

    [Inject]
    private HttpClient httpClient { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadClientes();
        await LoadProductos();
    }

    private async Task LoadClientes()
    {
        try
        {
            var response = await httpClient.GetAsync("https://localhost:7231/api/Cliente");
            if (response.IsSuccessStatusCode)
            {
                clientes = await response.Content.ReadFromJsonAsync<List<ClienteModel>>();
            }
            else
            {
                Console.WriteLine($"Error al cargar clientes: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar clientes: {ex.Message}");
        }
    }

    private async Task LoadUsuarios(int clienteId)
    {
        try
        {
            var response = await httpClient.GetAsync($"https://localhost:7231/api/Usuario?IdCliente={clienteId}");

            if (response.IsSuccessStatusCode)
            {
                usuarios = await response.Content.ReadFromJsonAsync<List<UsuarioModel>>();
            }
            else
            {
                Console.WriteLine($"Error al cargar usuarios: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar usuarios: {ex.Message}");
        }
    }

    private async Task LoadProductos()
    {
        try
        {
            var response = await httpClient.GetAsync("https://localhost:7231/api/Producto");
            if (response.IsSuccessStatusCode)
            {
                productos = await response.Content.ReadFromJsonAsync<List<ProductModel>>();
            }
            else
            {
                Console.WriteLine($"Error al cargar productos: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar productos: {ex.Message}");
        }
    }

    private async Task SolicitarNumero()
    {
        try
        {
            if (selectedClienteId == 0 || selectedUsuarioId == 0 || selectedProductoId == 0)
            {
                Console.WriteLine("Debe seleccionar un cliente, usuario y producto.");
                return;
            }

            var asignacionDto = new AsignacionDto
                {
                    ClienteId = selectedClienteId,
                    UsuarioId = selectedUsuarioId,
                    ProductoId = selectedProductoId
                };

            var response = await httpClient.PostAsJsonAsync("https://localhost:7231/api/Asignacion", asignacionDto);

            if (response.IsSuccessStatusCode)
            {
                asignacion = await response.Content.ReadFromJsonAsync<AsignacionDto>();
                cliente = clientes.FirstOrDefault(c => c.IdCLiente == selectedClienteId);
                usuario = usuarios.FirstOrDefault(u => u.IdUsuario == selectedUsuarioId);
                product = productos.FirstOrDefault(l => l.Id == selectedProductoId);
            }
            else
            {
                Console.WriteLine($"Error al asignar número: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al asignar número: {ex.Message}");
        }
    }

    private async Task OnClienteSelected(ChangeEventArgs args)
    {
        if (int.TryParse(args.Value?.ToString(), out int clienteId))
        {
            selectedClienteId = clienteId;
            await LoadUsuarios(clienteId);
        }
        else
        {
            usuarios = null;
        }
    }
}
